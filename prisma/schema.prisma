generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                     String                       @id @default(uuid())
  name                                   String
  email                                  String                       @unique
  password                               String
  role                                   Role                         @default(PATIENT)
  createdAt                              DateTime                     @default(now())
  updatedAt                              DateTime                     @updatedAt
  licenseNumber                          String?                      @unique
  stripeCustomerId                       String?                      @unique
  imageUrl                               String?
  DailyPositiveReinforcement             DailyPositiveReinforcement[]
  Document_Document_owner_idToUser       Document[]                   @relation("Document_owner_idToUser")
  Document_Document_uploaded_by_idToUser Document[]                   @relation("Document_uploaded_by_idToUser")
  feelings                               Feeling[]
  Invite                                 Invite[]
  patients                               ProfessionalPatient[]        @relation("ProfessionalPatients_patient")
  professionals                          ProfessionalPatient[]        @relation("ProfessionalPatients_professional")
  Subscription                           Subscription?
}

model Subscription {
  id             String             @id @default(uuid())
  professionalId String             @unique
  stripeSubId    String             @unique
  plan           Plan
  status         SubscriptionStatus
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  expiresAt      DateTime
  professional   User               @relation(fields: [professionalId], references: [id])
}

model Feeling {
  id          String   @id @default(uuid())
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  emotion     Emotion
  intensity   Int
  trigger     String?
  user        User     @relation(fields: [userId], references: [id])
}

model DailyPositiveReinforcement {
  id            String   @id @default(uuid())
  positiveThing String
  conquest      String
  kindness      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model ProfessionalPatient {
  id             String           @id @default(uuid())
  professionalId String
  patientId      String
  createdAt      DateTime         @default(now())
  patient        User             @relation("ProfessionalPatients_patient", fields: [patientId], references: [id])
  professional   User             @relation("ProfessionalPatients_professional", fields: [professionalId], references: [id])
  TherapySession TherapySession[]
}

model Invite {
  id           String       @id @unique @default(uuid())
  sent_by      String
  sent_to      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status       InviteStatus
  professional User         @relation(fields: [sent_by], references: [id])
}

model TherapySession {
  id                    Int                 @id @unique @default(autoincrement())
  professionalPatientId String
  done                  Boolean?            @default(false)
  confirmed             Boolean?            @default(false)
  startDate             DateTime
  endDate               DateTime
  createdAt             DateTime            @default(now())
  updatedAt             DateTime
  ProfessionalPatient   ProfessionalPatient @relation(fields: [professionalPatientId], references: [id])
}

model Document {
  id                                 String       @id @unique
  url                                String
  filename                           String
  mimeType                           String
  createdAt                          DateTime     @default(now())
  owner_id                           String?
  isPublic                           Boolean      @default(false)
  type                               DocumentType
  uploaded_by_id                     String?
  category                           String?
  User_Document_owner_idToUser       User?        @relation("Document_owner_idToUser", fields: [owner_id], references: [id])
  User_Document_uploaded_by_idToUser User?        @relation("Document_uploaded_by_idToUser", fields: [uploaded_by_id], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
}

enum Plan {
  BASIC
  UNLIMITED
}

enum Emotion {
  JOY
  SADNESS
  ANGER
  FEAR
  ANXIETY
  CALM
  FRUSTRATION
  SURPRISE
  NON_SPECIFIC
}

enum InviteStatus {
  ACCEPTED
  REJECTED
  PENDING
}

enum Role {
  PATIENT
  PROFESSIONAL
}

enum DocumentType {
  MODEL
  PATIENT_UPLOAD
  PROFESSIONAL_UPLOAD
  PATIENT_TO_PROFESSIONAL
  PROFESSIONAL_TO_PATIENT
}
